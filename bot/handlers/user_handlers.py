from aiogram import F, Router, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext

from bot.data.user_data import get_user_data, post_user_data
from bot.keyboards.user_boards import reply_get_phone_number, reply_main_menu, inline_start
from bot.utils.config import bot_start_text, exhibition_name
from bot.utils.filters import CheckReady, LoggedOut
from bot.utils.states import User

router = Router()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
@router.message(CommandStart())
async def command_start(message: types.Message, state: FSMContext):
    user_data = await get_user_data(chat_id=message.chat.id)

    if not await state.get_state():
        if user_data:
            await state.set_state(User.logged_in)
        else:
            await state.set_state(User.logged_out)

    fsm_user_state = await state.get_state()

    if fsm_user_state == "User:logged_in":
        text, keyboard = inline_start()
        await message.answer(text=text, reply_markup=keyboard)

        text, keyboard = reply_main_menu(phone=user_data.get('phone'))
        await message.answer(text=text, reply_markup=keyboard)

    elif fsm_user_state == "User:logged_out":
        await message.answer(text=bot_start_text)
        text, keyboard = reply_get_phone_number()
        await message.answer(text=text, reply_markup=keyboard)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(LoggedOut(), F.contact)
async def user_login(message: types.Message, state: FSMContext):
    phone = message.contact.phone_number

    if phone[0] != "+":
        phone = "+" + phone

    await post_user_data(chat_id=message.chat.id, phone=phone)
    await state.set_state(User.logged_in)

    text, keyboard = reply_main_menu(phone=phone)
    await message.answer(text=text, reply_markup=keyboard)

    text, keyboard = inline_start()
    await message.edit_text(text=text, reply_markup=keyboard)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(LoggedOut(), ~F.contact)
async def wrong_user_login(message: types.Message):
    text, keyboard = reply_get_phone_number()
    await message.answer(text=text, reply_markup=keyboard)


if exhibition_name == "PIR":
    ignore_text = ["üõí –∑–∞–∫–∞–∑—ã", "üé´ –±–∏–ª–µ—Ç—ã", "üéâ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "üìÖ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "ü§ù —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç—ã", "ü§ù –ø–∞—Ä—Ç–Ω—ë—Ä—ã"]
else:
    ignore_text = ["üõí –∑–∞–∫–∞–∑—ã", "üé´ –±–∏–ª–µ—Ç—ã", "üìç –ø–ª–∞–Ω –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "üìÖ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "ü§ù —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç—ã", "ü§ù –ø–∞—Ä—Ç–Ω—ë—Ä—ã"]


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(CheckReady(), ~F.text.lower().in_(ignore_text))
async def incorrect_user_message(message: types.Message):
    text = ('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –í–∞—à—É –∫–æ–º–∞–Ω–¥—É.\n'
            '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start')
    _, keyboard = reply_main_menu()

    await message.answer(text=text, reply_markup=keyboard)
