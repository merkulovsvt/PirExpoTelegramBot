from datetime import datetime

from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.callbacks.events_callbacks import EventPrint
from bot.callbacks.orders_callbacks import OrderDetails
from bot.callbacks.tickets_callbacks import (TicketDetails, TicketPrint,
                                             TicketsList)


# Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–∏–ª–µ—Ç–∞ +
def inline_ticket_types() -> (str, InlineKeyboardMarkup):
    builder = InlineKeyboardBuilder()
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∏–ª–µ—Ç–∞"

    builder.button(text="–í—Ö–æ–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã", callback_data=TicketsList(ticket_type="entry", order_id="*"))
    builder.button(text="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data=TicketsList(ticket_type="event", order_id="*"))
    builder.adjust(2)

    return text, builder.as_markup()


# Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤ (–¥–ª—è orders, –≤ —Ç–æ–º —á–∏—Å–ª–µ)
def inline_tickets_list(tickets: dict, ticket_type: str, order_id: str):
    builder = InlineKeyboardBuilder()
    list_empty = True

    if ticket_type == "entry":
        text = "–í—Ö–æ–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã:"
        return_button_text = "üé´ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        callback_data = "tickets_menu"

    elif ticket_type == "event":
        text = "–ë–∏–ª–µ—Ç—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:"
        return_button_text = "üé´ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        callback_data = "tickets_menu"

    else:
        text = f"–ë–∏–ª–µ—Ç—ã –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}"
        return_button_text = "üõí –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–∫–∞–∑—É"
        callback_data = OrderDetails(order_id=order_id)

    tickets_set = set()
    for ticket in tickets:
        tickets_set.add((ticket['id'], ticket["ticket_type"]["is_event"],
                         ticket['ticket_type']['name'], ticket['status']))

    for ticket in sorted(tickets_set, key=lambda x: (x[1], len(x[2]))):
        if ticket[1]:
            event_name = ticket[2].strip("\"")
            button_text = f"–ë–∏–ª–µ—Ç ‚Ññ{ticket[0]} \"{event_name}\""
        else:
            button_text = f"–í—Ö–æ–¥–Ω–æ–π –±–∏–ª–µ—Ç ‚Ññ{ticket[0]}"
            # button_text = f"–í—Ö–æ–¥–Ω–æ–π –±–∏–ª–µ—Ç ‚Ññ{ticket['id']} –Ω–∞ {tickets[ticket_id]['ticket_owner_name']}" #TODO

        if (ticket_type == "*" or (ticket[1] and ticket_type == "event") or (
                not ticket[1] and ticket_type == "entry")) and ticket[3] == "2":
            list_empty = False
            builder.button(text=button_text, callback_data=TicketDetails(order_id=order_id,
                                                                         ticket_id=str(ticket[0]),
                                                                         ticket_type="event" if ticket[1] else "entry"))

    if ticket_type != "*" and list_empty:
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    elif ticket_type == "*" and list_empty:
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤ –≤ –¥–∞–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ"

    builder.button(text=return_button_text, callback_data=callback_data)
    builder.adjust(1, repeat=True)

    return text, builder.as_markup()


# Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–µ—Ç–∞–ª–µ–π –±–∏–ª–µ—Ç–∞
def inline_ticket_details(event_data: dict, order_id: str, ticket_id: str, ticket_type: str):
    builder = InlineKeyboardBuilder()
    if ticket_type == "entry":
        builder.button(text="–°–∫–∞—á–∞—Ç—å", callback_data=TicketPrint(ticket_id=ticket_id))

        # text = f"–í—Ö–æ–¥–Ω–æ–π –±–∏–ª–µ—Ç ‚Ññ{ticket_id} –Ω–∞ {ticket_details['ticket_owner_name']}" #TODO
        text = f"–í—Ö–æ–¥–Ω–æ–π –±–∏–ª–µ—Ç ‚Ññ{ticket_id}\n"
        # + f"–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∑–∞–∫–∞–∑—É ‚Ññ{order_id}.")
        builder.button(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", url="zaza.com")  # –ñ–¥—ë–º —Å—Å—ã–ª–∫—É –æ—Ç –õ–µ—à–∏

        if order_id != "*":
            ticket_type = "*"

        builder.button(text="üé´ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –±–∏–ª–µ—Ç–æ–≤",
                       callback_data=TicketsList(ticket_type=ticket_type, order_id=order_id))
        builder.adjust(2, 1, 1)

    else:
        name = event_data.get('name').strip("\"")
        type_name = event_data.get('type').get('name')
        ticket_type_id = event_data.get('ticket_type').get('id')

        date = datetime.fromisoformat(event_data.get("time_start")).strftime('%d.%m.%Y')
        time_start = datetime.fromisoformat(event_data.get("time_start")).strftime('%H:%M')
        time_finish = datetime.fromisoformat(event_data.get('time_finish')).strftime('%H:%M')

        text = (f"<b>–î–∞—Ç–∞:</b> <i>{date}</i>\n\n"
                f"<b>–í—Ä–µ–º—è:</b> <i>{time_start}</i> - <i>{time_finish}</i>\n\n"
                f"<b>{type_name}</b>: \"{name}\"\n\n"
                f"<b>–ú–µ—Å—Ç–æ</b>: {event_data['place'].get('name') if event_data.get('place') else ''}")

        builder.button(text="–°–∫–∞—á–∞—Ç—å –±–∏–ª–µ—Ç", callback_data=EventPrint(ticket_type_id=str(ticket_type_id)))
        builder.adjust(1, 1)

        if order_id != "*":
            ticket_type = "*"

        builder.button(text="üé´ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –±–∏–ª–µ—Ç–æ–≤",
                       callback_data=TicketsList(ticket_type=ticket_type, order_id=order_id))
        builder.adjust(1, repeat=True)

    return text, builder.as_markup()
