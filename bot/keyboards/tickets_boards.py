from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.utils.callbackdata import OrderInfo, TicketInfo


# Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–∏–ª–µ—Ç–∞ +
def inline_ticket_types() -> (str, InlineKeyboardMarkup):
    builder = InlineKeyboardBuilder()
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∏–ª–µ—Ç–∞"

    builder.button(text="–í—Ö–æ–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã", callback_data="tickets_entry_*")
    builder.button(text="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="tickets_event_*")
    builder.adjust(2)

    return text, builder.as_markup()


# Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤ +
def inline_tickets_list(tickets: dict, ticket_type: str, order_id: str):
    builder = InlineKeyboardBuilder()
    list_empty = True

    if ticket_type == "entry":
        text = "–í—Ö–æ–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã:"
        return_button_text = "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        callback_data = "ticket_types"

    elif ticket_type == "event":
        text = "–ë–∏–ª–µ—Ç—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:"
        return_button_text = "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        callback_data = "ticket_types"

    # elif ticket_type == "*":
    else:
        text = f"–ë–∏–ª–µ—Ç—ã –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}"
        return_button_text = "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–∫–∞–∑—É"
        callback_data = OrderInfo(order_id=order_id)

    for ticket_id in tickets:
        if tickets[ticket_id]["ticket_type"] == "entry":
            button_text = f"–í—Ö–æ–¥–Ω–æ–π –±–∏–ª–µ—Ç ‚Ññ{ticket_id} –Ω–∞ {tickets[ticket_id]['ticket_owner_name']}"

        # elif tickets[ticket_id]["ticket_type"] == "event":
        else:
            button_text = f"–ë–∏–ª–µ—Ç ‚Ññ{ticket_id} –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {tickets[ticket_id]['event_name']}"

        if ticket_type == "*" or tickets[ticket_id]["ticket_type"] == ticket_type:
            list_empty = False
            builder.button(text=button_text, callback_data=TicketInfo(order_id=order_id, ticket_id=ticket_id,
                                                                      ticket_type=tickets[ticket_id]["ticket_type"]))

    if ticket_type != "*" and list_empty:
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    elif ticket_type == "*" and list_empty:
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤ –≤ –¥–∞–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ"

    builder.button(text=return_button_text, callback_data=callback_data)
    builder.adjust(1, repeat=True)

    return text, builder.as_markup()


# Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–µ—Ç–∞–ª–µ–π –±–∏–ª–µ—Ç–∞ ~
def inline_ticket_details(ticket_details: dict, order_id: str, ticket_id: str, ticket_type: str):
    builder = InlineKeyboardBuilder()

    builder.button(text="–°–∫–∞—á–∞—Ç—å", callback_data=f"ticket_print_{ticket_id}")
    builder.button(text="–í–µ—Ä–Ω—É—Ç—å", url="zaza.com")  # –ñ–¥—ë–º —Å—Å—ã–ª–∫—É –æ—Ç –õ–µ—à–∏

    if ticket_type == "entry":
        text = f"–í—Ö–æ–¥–Ω–æ–π –±–∏–ª–µ—Ç ‚Ññ{ticket_id} –Ω–∞ {ticket_details['ticket_owner_name']}"
        builder.button(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", url="zaza.com")  # –ñ–¥—ë–º —Å—Å—ã–ª–∫—É –æ—Ç –õ–µ—à–∏

    # elif ticket_type == "event":
    else:
        text = f"–ë–∏–ª–µ—Ç ‚Ññ{ticket_id} –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {ticket_details['event_name']}"
        builder.button(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏", callback_data="121231312335")  # –î–æ–¥–µ–ª–∞—Ç—å

    if order_id != "*":
        ticket_type = "*"

    builder.button(text="üé´ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –±–∏–ª–µ—Ç–æ–≤", callback_data=f"tickets_{ticket_type}_{order_id}")
    builder.adjust(2, 1, 1)

    return text, builder.as_markup()
